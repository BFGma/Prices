CREATE TABLE IF NOT EXISTS Mat_gr (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS Vendor (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) NOT NULL UNIQUE,
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Mat (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_gr integer DEFAULT 0 REFERENCES Mat_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Code_producer integer DEFAULT 0 REFERENCES Vendor(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Code_vendor integer DEFAULT 0 REFERENCES Vendor(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Producer_code varchar(32),
	Vendor_code varchar(32),
	Name varchar(100) NOT NULL UNIQUE,
	Price numeric(12, 2) DEFAULT 0 CHECK (price >= 0),
	Meas varchar(5) NOT NULL DEFAULT 'шт',
	Upddate date NOT NULL DEFAULT CURRENT_DATE
);

CREATE TABLE IF NOT EXISTS Prod_gr (
	Code integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) UNIQUE
);

CREATE TABLE IF NOT EXISTS Prod_box (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_gr integer DEFAULT 0 REFERENCES Prod_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Name varchar(32) NOT NULL UNIQUE,
	Size varchar(20),
	Price numeric(12, 2) DEFAULT 0 CHECK (price >= 0),
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Prod_box_Prod_box (
	Prod_box integer NOT NULL REFERENCES Prod_box(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Prod_box_part integer NOT NULL REFERENCES Prod_box(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Num integer NOT NULL DEFAULT 1
);

CREATE TABLE IF NOT EXISTS Prod_detail (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_mat integer REFERENCES Mat(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Name varchar(32) NOT NULL,
	Weight numeric(7, 2) DEFAULT 0,
	S_primer numeric(7, 2) DEFAULT 0,
	S_enamel numeric(7, 2) DEFAULT 0,
	S_powderpaint numeric(7, 2) DEFAULT 0,
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Prod_gr_Prod_detail (
	Code_gr integer NOT NULL REFERENCES Prod_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Code_detail integer NOT NULL REFERENCES Prod_detail(Code) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Mat_Prod_box (
	Code_prod_box integer NOT NULL REFERENCES Prod_box(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Code_mat integer NOT NULL REFERENCES Mat(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Num integer NOT NULL DEFAULT 1
);

CREATE TABLE IF NOT EXISTS Scheme (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_gr integer DEFAULT 0 REFERENCES Prod_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Name varchar(64) NOT NULL UNIQUE,
	Price numeric(12, 2) DEFAULT 0 CHECK (Price >= 0),
	Coeff integer NOT NULL DEFAULT 2,
	Inlist boolean DEFAULT TRUE,
	Notes varchar(128)
);

CREATE TABLE IF NOT EXISTS Tool_gr (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) NOT NULL UNIQUE,
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Tool (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_gr integer REFERENCES Tool_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Form varchar(10) NOT NULL DEFAULT 'Notype',
	Form_name varchar(32),
	Size varchar(20),
	Size_diff numeric(3, 2),
	Type varchar(1),
	Num integer DEFAULT 0
);

CREATE TABLE IF NOT EXISTS Users_gr (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS Users (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Code_gr integer REFERENCES Users_gr(Code) ON UPDATE CASCADE ON DELETE SET NULL,
	Login varchar(16) NOT NULL UNIQUE,
	FIO varchar(64) NOT NULL,
	Phone integer NOT NULL,
	Mail varchar(64) NOT NULL UNIQUE,
	Superuser boolean DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS Operation (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(64) NOT NULL UNIQUE,
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Workplace (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(64) NOT NULL UNIQUE,
	Note varchar(64)
);

CREATE TABLE IF NOT EXISTS Operation_route (
	Code integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	Name varchar(32) NOT NULL UNIQUE,
	Note varchar(128)
);

CREATE TABLE IF NOT EXISTS Operation_route_Operation (
	Code_route integer NOT NULL REFERENCES Operation_route(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Code_operation integer NOT NULL REFERENCES Operation(Code) ON UPDATE CASCADE ON DELETE CASCADE,
	Code_workplace integer REFERENCES Workplace(Code) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS Setts (
	Sett varchar(32) NOT NULL PRIMARY KEY,
	Value varchar(32),
	List varchar(64),
	Note varchar(64)
);

-- Примеры скриптов вставки

/*
INSERT INTO Mat_gr(Name) VALUES ('Материалы'), ('Автоматы'), ('Дифф.автоматы'), ('УЗО'), ('Выкл.нагрузки'),
('Контакторы, пускатели'), ('Реле'), ('Рубильники'), ('Предохранители'), ('Трансформаторы тока'), ('Изм.приборы'),
('Кнопки, переключатели'), ('Зажимы, клеммы'), ('Провода, кабеля'), ('Наконечники'), ('Сальники, фиттинги'),
('Шины'), ('Светосигн.арматура'), ('Высоковольтное оборудование');

INSERT INTO Vendor(Name) VALUES ('IEK'), ('ETM');

INSERT INTO mat(code_gr, code_producer, code_vendor, producer_code, vendor_code, name, price, meas) values(2, 1, 2, 111111, 'ETM112332', 'ВА47-29 1р С', 125.25, DEFAULT);

INSERT INTO mat(code_gr, code_producer, code_vendor, producer_code, vendor_code, name, price, meas) values(2, 1, 2, 111112, 'ETM112333', 'ВА47-29 2р С', 225.25, DEFAULT);

INSERT INTO Prod_gr(Name) VALUES ('ВРУ 1'), ('ВРУ 3');
*/

-- Примеры скриптов SELECT
/*
SELECT name FROM Mat_gr;

SELECT Name FROM Prod_gr;

SELECT m.code, g.name, v.name AS producer, vv.name AS vendor, m.producer_code, m.vendor_code, m.name, m.price, m.meas, m.upddate
FROM mat AS m INNER JOIN mat_gr AS g ON (m.code_gr = g.code) INNER JOIN vendor AS v ON (m.code_producer = v.code)
INNER JOIN vendor AS vv ON (m.code_vendor = vv.code)

select c.relname FROM pg_class c where c.relkind = 'S'; ВЫВЕСТИ НАЗВАНИЯ ВСЕХ ПОСЛЕДОВАТЕЛЬНОСТЕЙ

ALTER SEQUENCE {name} RESTART WITH {num}; ИЗМЕНИТЬ СЛЕДУЮЩЕЕ СТАРТОВОЕ ЧИСЛО ПОСЛЕДОВАТЕЛЬНОСТИ

SELECT m.code as "Код", gr.name as "Группа", v.name as "Производитель", 
vv.name as "Поставщик", m.producer_code as "Код произв.", 
m.vendor_code as "Код пост.", m.name as "Название", m.price as "Цена", 
m.meas as "Ед.", m.upddate "Дата обновл." FROM mat AS m 
INNER JOIN vendor as v ON (m.code_producer = v.code) INNER JOIN mat_gr 
as gr ON (m.code_gr = gr.code) INNER JOIN vendor as vv ON (m.code_vendor = vv.code) 
order by gr.name, m.name;	ПОЛУЧИТЬ ТАБЛИЦУ ДЛЯ ЭКСЕЛЯ

select last_value FROM mat_code_seq; ВЫВЕСТИ ПОСЛЕДНЕЕ ЗНАЧЕНИЕ ПОСЛЕДОВАТЕЛЬНОСТИ
*/